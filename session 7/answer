#include <iostream>
using namespace std;


class TreeNode {
public:
    int value;
    TreeNode *left;
    TreeNode *right;
    int height;


    TreeNode(int val) : value(val), left(nullptr), right(nullptr), height(1) {}
};


class BalancedTree {
private:
    TreeNode *root;


    int getHeight(TreeNode *node) {
        if (node == nullptr)
            return 0;
        return node -> height;
    }


    int balanceFactor(TreeNode *node) {
        if (node == nullptr)
            return 0;
        return getHeight(node -> left) - getHeight(node -> right);
    }


    TreeNode *rotateLeft(TreeNode *x) {
        TreeNode *y = x -> right;
        TreeNode *T2 = y -> left;


        y -> left = x;
        x -> right = T2;


        getHeight(x);
        getHeight(y);


        return y;
    }


    TreeNode *rotateRight(TreeNode *y) {
        TreeNode *x = y -> left;
        TreeNode *T2 = x -> right;


        x -> right = y;
        y -> left = T2;


        getHeight(y);
        getHeight(x);


        return x;
    }


    TreeNode *insertUtil(TreeNode *node, int key) {
        if (node == nullptr)
            return new TreeNode(key);


        if (key < node -> value)
            node -> left = insertUtil(node -> left, key);
        else if (key > node -> value)
            node -> right = insertUtil(node -> right, key);
        else return node;


        getHeight(node);


        int balance = balanceFactor(node);


        if (balance > 1 && key < node -> left -> value)
            return rotateRight(node);


        if (balance < -1 && key > node -> right -> value)
            return rotateLeft(node);


        if (balance > 1 && key > node -> left -> value) {
            node -> left = rotateLeft(node -> left);
            return rotateRight(node);
        }


        if (balance < -1 && key < node -> right -> value) {
            node -> right = rotateRight(node -> right);
            return rotateLeft(node);
        }


        return node;
    }


    TreeNode *deleteUtil(TreeNode *root, int key) {
        if (root == nullptr)
            return root;


        if (key < root -> value)
            root -> left = deleteUtil(root -> left, key);
        else if (key > root -> value)
            root -> right = deleteUtil(root -> right, key);
        else {
            if (root -> left == nullptr || root -> right == nullptr) {
                TreeNode *temp = root -> left ? root -> left : root -> right;


                if (temp == nullptr) {
                    temp = root;
                    root = nullptr;
                } else
                    *root = *temp;


                delete temp;
            } else {
                TreeNode *temp = minValueNode(root -> right);


                root -> value = temp -> value;


                root -> right = deleteUtil(root -> right, temp -> value);
            }
        }


        if (root == nullptr)
            return root;


        getHeight(root);


        int balance = balanceFactor(root);


        if (balance > 1 && balanceFactor(root -> left) >= 0)
            return rotateRight(root);


        if (balance > 1 && balanceFactor(root -> left) < 0) {
            root -> left = rotateLeft(root -> left);
            return rotateRight(root);
        }


        if (balance < -1 && balanceFactor(root -> right) <= 0)
            return rotateLeft(root);


        if (balance < -1 && balanceFactor(root -> right) > 0) {
            root -> right = rotateRight(root -> right);
            return rotateLeft(root);
        }


        return root;
    }


    TreeNode *minValueNode(TreeNode *node) {
        TreeNode *current = node;


        while (current -> left != nullptr)
            current = current -> left;


        return current;
    }


public:
    BalancedTree() : root(nullptr) {}


    void insert(int key) {
        root = insertUtil(root, key);
    }


    void deleteNode(int key) {
        root = deleteUtil(root, key);
    }


    TreeNode *search(int key) {
        TreeNode *current = root;
        while (current != nullptr) {
            if (current -> value == key)
                return current;
            else if (current -> value < key)
                current = current -> right;
            else
                current = current -> left;
        }
        return nullptr;
    }
};


int main() {
    BalancedTree balancedTree;


    int choice;
    do {
        cout << "PICK YOUR OPERATION"<<endl;
        cout << "1. insert node"<<endl;
        cout << "2. delete node"<<endl;
        cout << "3. search for key"<<endl;
        cout << "4. exit"<<endl;
        cout << "enter choice: ";
       
        cin >> choice;


        switch (choice) {
            case 1: {
                int key;
                cout << "enter key to insert: ";
                cin >> key;
                balancedTree.insert(key);
                cout << "node with key " << key << " inserted."<<endl;
                break;
            }
            case 2: {
                int key;
                cout << "enter key to delete: ";
                cin >> key;
                TreeNode *deletedNode = balancedTree.search(key);
                if (deletedNode != nullptr) {
                    balancedTree.deleteNode(key);
                    cout << "node with key " << key << " deleted."<<endl;
                } else {
                    cout << "node with key " << key << " not found."<<endl;
                }
                break;
            }
            case 3: {
                int key;
                cout << "enter the key to search for: ";
                cin >> key;
                TreeNode *searchResult = balancedTree.search(key);
                if (searchResult != nullptr)
                    cout <<"key found."<<endl;
                else
                    cout <<"key not found."<<endl;
                break;
            }
            case 4: {
                cout << "Goodbye."<<endl;
                break;
            }
            default:
                cout << "Invalid choice."<<endl;
        }
    } while (choice != 4);


    return 0;
}
